I"?	<h1 id="swift-错误处理">swift 错误处理</h1>

<h2 id="错误定义">错误定义</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum XXXError: Error {
    case invalidSelection
    case outOfStock
}

// 抛出错误
throw XXXError.outOfStock
</code></pre></div></div>

<h2 id="错误抛出函数">错误抛出函数</h2>

<p>只有抛出函数才能传递错误</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func canThrowErrors() throws -&gt; String {
    if (1 == 1) {
        throw XXXError.invalidSelection
    }
}
</code></pre></div></div>

<h2 id="处理错误">处理错误</h2>

<h3 id="do-catch-处理错误">do-catch 处理错误</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>do {
    print("执行函数")
    try canThrowErrors()
} catch {
    print(error)
}
</code></pre></div></div>

<h3 id="try-可选错误">try? 可选错误</h3>

<p>计算表达式，如果表达式抛出错误，则x为nil。通常可以和<code class="language-plaintext highlighter-rouge">if let</code><code class="language-plaintext highlighter-rouge">guard let</code>使用</p>

<p><code class="language-plaintext highlighter-rouge">let x = try? canThrowErrors()</code></p>

<h3 id="try-禁用错误">try! 禁用错误</h3>

<p>在确认不方法不会在运行时抛出错误使用；</p>

<p>如果实际抛出错误，则在运行时收到错误。</p>

<p><code class="language-plaintext highlighter-rouge">let x = try! canThrowErrors()</code></p>

<h3 id="defer-清理操作">defer 清理操作</h3>

<p>您可以使用defer语句在代码执行离开当前代码块之前执行一组语句。</p>

<p>无论执行如何离开当前代码块，该语句都可以让您执行任何必要的清理——无论它是因为抛出错误还是因为诸如returnor之类的语句而离开break。</p>

<p>例如，您可以使用defer语句来确保关闭文件描述符并释放手动分配的内存。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func processFile(fileName: String) throws {
    let file = open(fileName)
    defer { // 会在函数执行完毕后清理
        close(file)
    }
}
</code></pre></div></div>
:ET